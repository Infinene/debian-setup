index 						index.php;

  # Only accept expected http methods.
  if ($not_an_allowed_http_method) {
    return 405;
  }

  # Note: nginx processes different types of 'location' block in priority order,
  # somewhat regardless of the order they are declared here. To help a human reason this,
  # the location blocks are mostly presented in priority order.

  # ---------------------
  # Exact match locations
  # ---------------------

location = / {
	include 				fastcgi_params;
	fastcgi_param 			SCRIPT_NAME 	/index.php;
	fastcgi_param 			SCRIPT_FILENAME	$document_root/index.php;
	fastcgi_param 			QUERY_STRING	q=$uri&$args;
	fastcgi_pass 			php-fpm;
}

location = /robots.txt {
	try_files $uri 404;
	allow						all;
	log_not_found				off;
	access_log					off;
	# include					snippets/_norobots;
}

  # ---------------------
  # Longest prefix match locations. Identified by ^~ this is a plain-text match (not a regex!)
  # ---------------------

  # All CiviCRM paths are under /civicrm/ (because CiviCRM also runs in CMS contexts and uses this as a namespace)
location ^~ /civicrm/ {
	location ~*^/civicrm/(dashboard/|contact/dedupefind|contact/import|activity/search|contribute/import|ajax/status\?|payment/ipn/\d+) {
		fastcgi_index 			index.php;
		include 				fastcgi_params;
		fastcgi_read_timeout 	300s;
		fastcgi_param 			SCRIPT_NAME 	/index.php;
		fastcgi_param 			SCRIPT_FILENAME	$document_root/index.php;
		fastcgi_param 			QUERY_STRING	q=$uri&$args;
		fastcgi_pass 			php-fpm;
		}

	# All requests go via Civi with the default read timeout.
	fastcgi_index			index.php;
	include 				fastcgi_params;
	fastcgi_param 			SCRIPT_NAME 	/index.php;
	fastcgi_param 			SCRIPT_FILENAME	$document_root/index.php;
	fastcgi_param 			QUERY_STRING	q=$uri&$args;
	fastcgi_pass 			php-fpm;
}

# ---------------------
# Regex match locations (these are processed after longest-prefix)
# ---------------------

# Allow access to reasonable assets shipped with core, extensions, or from the public dir.
# @todo do you need extra extensions here?
# @todo if, say, you want to allow downloading of .sql or .zip or .tar etc. files from /public
# then create a separate rule that covers strictly what you expect and nothing wider.
# You want to ensure that any files a developer might accidentally create/leave around
# like backups, sql dumps etc. are not world-accessible.
location ~ ^/(public|core|ext)/.*\.(png|css|jpg|webp|js|mjs|gif|ico|svg|woff2|html)$ {
# Return the file if it exists, or a 404
	try_files $uri 404;
}

## Allow direct access to running known PHP files in 'extern/' (deprecated)
location ~ ^/core/extern/(authorizeIPN|cxn|ipn|open|rest|soap|url|widget).php$ {
	fastcgi_index index.php;
	include fastcgi_params;
	fastcgi_pass php-fpm;
}

# Default location.
location / {
	return 404;
}
