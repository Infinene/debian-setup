#!/bin/bash

if [ "$(whoami)" != "root" ]; then
  SUDO=sudo
fi


### nnn #########################################
echo
echo "Updating nnn..."

if command -v nnn &> /dev/null
then
  CUR_VERSION="$(nnn -V)"
else
  CUR_VERSION="0.0"
fi
        
NEW_VERSION="$(curl -s "https://github.com/jarun/nnn/releases/latest" | grep -Eo "[0-9]+\.[0-9]+(\.[0-9]+)?")"

if [ "$CUR_VERSION" = "${NEW_VERSION}" ]; then
    echo "Already at latest version: nnn $CUR_VERSION"
else
    # get the package
    newfile="nnn-static-${NEW_VERSION}.x86_64.tar.gz"
    curl -Ls -O "https://github.com/jarun/nnn/releases/download/v${NEW_VERSION}/${newfile}"
    tar -xf $newfile
    ${SUDO} mv nnn-static /usr/local/bin/nnn
    # remove the file
    rm -rf $newfile
fi


### bat #########################################
echo
echo "Updating bat..."

if command -v bat &> /dev/null
then
  CUR_VERSION="$(bat -V)"
else
  CUR_VERSION="0.0"
fi

NEW_VERSION="$(curl -s "https://github.com/sharkdp/bat/releases/latest" | grep -Eo "[0-9]+\.[0-9]+(\.[0-9]+)?")"

if [ "$CUR_VERSION" = "bat ${NEW_VERSION}" ]; then
    echo "Already at latest version: ${CUR_VERSION}"
else
    # get the package
    curl -Ls -O "https://github.com/sharkdp/bat/releases/download/v${NEW_VERSION}/bat_${NEW_VERSION}_amd64.deb"
    # install it
    ${SUDO} dpkg -i bat_"${NEW_VERSION}"_amd64.deb
    # remove the file
    rm -rf bat_"${NEW_VERSION}"_amd64.deb
fi


### fd ##########################################
echo
echo "Updating fd..."

if command -v fd &> /dev/null
then
  CUR_VERSION="$(fd -V)"
else
  CUR_VERSION="0.0"
fi

NEW_VERSION="$(curl -s "https://github.com/sharkdp/fd/releases/latest" | grep -Eo "[0-9]+\.[0-9]+(\.[0-9]+)?")"

if [ "$CUR_VERSION" = "fd ${NEW_VERSION}" ]; then
    echo "Already at latest version: ${CUR_VERSION}"
else
    # get the package
    curl -Ls -O "https://github.com/sharkdp/bat/releases/download/v${NEW_VERSION}/fd_${NEW_VERSION}_amd64.deb"
    # install it
    ${SUDO} dpkg -i fd_"${NEW_VERSION}"_amd64.deb
    # remove the file
    rm -rf fd_"${NEW_VERSION}"_amd64.deb
fi


### ripgrep #####################################
echo
echo "Updating ripgrep..."

if command -v rg &> /dev/null
then
  CUR_VERSION="$(rg -V)"
else
  CUR_VERSION="0.0"
fi

NEW_VERSION="$(curl -s "https://github.com/BurntSushi/ripgrep/releases/latest" | grep -Eo "[0-9]+\.[0-9]+(\.[0-9]+)?")"

if [ "$CUR_VERSION" = "ripgrep ${NEW_VERSION}" ]; then
    echo "Already at latest version: ${CUR_VERSION}"
else
    # get the package
    curl -Ls -O "https://github.com/BurntSushi/ripgrep/releases/download/${NEW_VERSION}/ripgrep_${NEW_VERSION}_amd64.deb"
    # install it
    ${SUDO} dpkg -i ripgrep_"${NEW_VERSION}"_amd64.deb
    # remove the file
    rm -rf ripgrep_"${NEW_VERSION}"_amd64.deb
fi


### composer ####################################
echo
echo "Updating composer..."

if [ -f /usr/local/bin/composer ]; then
    ${SUDO} composer selfupdate
else
  EXPECTED_CHECKSUM="$(php -r 'copy("https://composer.github.io/installer.sig", "php://stdout");')"
  php -r "copy('https://getcomposer.org/installer', 'composer-setup.php');"
  php -r "if (hash_file('sha384', 'composer-setup.php') === '${EXPECTED_CHECKSUM}') { echo 'Installer verified'; } else { echo 'Installer corrupt'; unlink('composer-setup.php'); } echo PHP_EOL;"
  ${SUDO} php composer-setup.php --filename=composer --install-dir=/usr/local/bin
  php -r "unlink('composer-setup.php');"
fi

